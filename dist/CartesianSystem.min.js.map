{"version":3,"sources":["webpack://CartesianSystem/webpack/universalModuleDefinition","webpack://CartesianSystem/webpack/bootstrap","webpack://CartesianSystem/../node_modules/webpack/buildin/global.js","webpack://CartesianSystem/./Camera.js","webpack://CartesianSystem/./CameraGrid.js","webpack://CartesianSystem/./CartesianSystem.js","webpack://CartesianSystem/./GameObjectHandler.js","webpack://CartesianSystem/./World.js","webpack://CartesianSystem/./createAA.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;ACnwB;;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,UAAU;AAC5B;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,K;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B,oBAAoB;AAClD;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B,oBAAoB;AAClD;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8BAA8B,oBAAoB;AAClD;AACA,kCAAkC,oBAAoB;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;;AC3LA;AACA,WAAW,mBAAO,CAAC,8BAAY;AAC/B;AACA,kBAAkB,mBAAO,CAAC,oCAAe;AACzC;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACTA,eAAe,mBAAO,CAAC,oCAAe;;AAEtC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA,mC;;;;;;;;;;;ACxGA,aAAa,mBAAO,CAAC,gCAAa;AAClC,iBAAiB,mBAAO,CAAC,wCAAiB;AAC1C,wBAAwB,mBAAO,CAAC,mDAAqB;AACrD,eAAe,mBAAO,CAAC,oCAAe;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,wEAAwE;;AAE7G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;;AAEzC;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;;;;;;;;;;;AC/SA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,S;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA,0B","file":"CartesianSystem.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CartesianSystem\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CartesianSystem\"] = factory();\n\telse\n\t\troot[\"CartesianSystem\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./CartesianSystem.js\");\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","function Camera(windowX, windowY, windowWidth, windowHeight)\n{\n    // Window stuff\n    this.windowX = windowX;\n    this.windowY = windowY;\n    this.windowWidth = windowWidth;\n    this.windowHeight = windowHeight;\n    this.halfWindowWidth = windowWidth / 2;\n    this.halfWindowHeight = windowHeight / 2;\n\n    // Needed for moving the camera\n    this.scrollX = this.halfWindowWidth;\n    this.scrollY = this.halfWindowHeight;\n    this.scrollSpeed = 0.5;\n\n    // The bounds the camera will stay with in\n    // These will need to be set externally\n    this.bounds = {\n        minX: -Infinity,\n        minY: -Infinity,\n        maxX: Infinity,\n        maxY: Infinity\n    };\n\n    this.boundingBox = {\n        minX: this.scrollX - this.halfWindowWidth,\n        minY: this.scrollY - this.halfWindowHeight,\n        maxX: this.scrollX + this.halfWindowWidth,\n        maxY: this.scrollY + this.halfWindowHeight\n    };\n    \n    var focusObject;\n\n    this.update = function()\n    {\n        if(focusObject)\n        {\n            this.scroll(focusObject.x, focusObject.y, focusObject.name);\n        }\n    };\n\n    this.setFocus = function(x, y, name)\n    {\n        focusObject = {\n            x: x,\n            y: y,\n            name: name\n        };\n    };\n    this.updateFocus = function(x, y)\n    {\n        if(focusObject)\n        {\n            focusObject.x = x;\n            focusObject.y = y;\n        }\n    };\n    this.getFocus = function()\n    {\n        return focusObject;\n    };\n    this.removeFocus = function()\n    {\n        delete this.scrolls[name];\n        focusObject = undefined;\n    };\n    this.getScroll = function()\n    {\n        return {\n            x: this.scrollX,\n            y: this.scrollY\n        };\n    };\n\n    this.scrolls = {};\n\n    this.getTranslateValues = function()\n    {\n        return {\n            x: this.windowX + this.halfWindowWidth - this.scrollX,\n            y: this.windowY + this.halfWindowHeight - this.scrollY, \n        };\n    };\n}\nCamera.prototype.scroll = function(x, y, name)\n{\n    if(!this.scrolls[name])\n    {\n        this.scrolls[name] = {\n            x: this.scrollX,\n            y: this.scrollY\n        };\n    }\n\n    var scroll = this.scrolls[name];\n\n    // Move direction and move magnitude\n    // These will be used to move the scroll of the camera \n    var moveDir = Math.atan2(y - scroll.y, x - scroll.x);\n    var moveMag = Math.sqrt(Math.pow(x - scroll.x, 2) + Math.pow(y - scroll.y, 2)) * this.scrollSpeed;\n\n    // Move camera in both x and y components\n    scroll.x += moveMag * Math.cos(moveDir);\n    scroll.y += moveMag * Math.sin(moveDir);\n\n    this.scrollX = scroll.x;\n    this.scrollY = scroll.y;\n\n    // Keep it within bounds\n    this.scrollX = Math.min(Math.max(this.scrollX, this.bounds.minX + this.halfWindowWidth), this.bounds.maxX - this.halfWindowWidth);\n    this.scrollY = Math.min(Math.max(this.scrollY, this.bounds.minY + this.halfWindowHeight), this.bounds.maxY - this.halfWindowHeight);\n\n    // Update the bounding box\n    this.boundingBox.minX = this.scrollX - this.halfWindowWidth;\n    this.boundingBox.minY = this.scrollY - this.halfWindowHeight;\n    this.boundingBox.maxX = this.scrollX + this.halfWindowWidth;\n    this.boundingBox.maxY = this.scrollY + this.halfWindowHeight;\n};\nCamera.prototype.resize = function(windowX, windowY, windowWidth, windowHeight)\n{\n    this.windowX = windowX;\n    this.windowY = windowY;\n    this.windowWidth = windowWidth;\n    this.windowHeight = windowHeight;\n    this.halfWindowWidth = windowWidth / 2;\n    this.halfWindowHeight = windowHeight / 2;\n};\n\nmodule.exports = Camera;","function CameraGrid(cols, rows, cellWidth, cellHeight)\n{\n    this.cols = cols;\n    this.rows = rows;\n    this.cellWidth = cellWidth;\n    this.cellHeight = cellHeight;\n    this.halfCellWidth = cellWidth / 2;\n    this.halfCellHeight = cellHeight / 2;\n\n    this.grid = [];\n\n    var round = Math.round;\n    var min = Math.min;\n    var max = Math.max;\n\n    this.reset = function()\n    {\n        this.grid.length = 0;\n    \n        var cols = this.cols;\n        var rows = this.rows;\n        var i, j;\n    \n        for(i = 0; i < cols; i++)\n        {\n            this.grid.push([]);\n            // Create a cell with no __proto__ object\n            for(j = 0; j < rows; j++)\n            {\n                this.grid[i][j] = Object.create(null);\n            }\n        }\n        \n        this.minCol = 0;\n        this.minRow = 0;\n        this.maxCol = this.grid.length - 1;\n        this.maxRow = this.grid[0].length - 1;\n    };\n\n    /**\n     * Only use if you understand the implications, in other \n     * words only use if you don't need a bounds check first\n     * \n     * @method CameraGrid#getCoorssFast\n     * @returns {object} col and row\n     */\n    this.getCoorsFast = function(x, y)\n    {\n        return {\n            col: round((x - this.halfCellWidth) / this.cellWidth),\n            row: round((y - this.halfCellHeight) / this.cellHeight)\n        };\n    };\n\n    /**\n     * Converts x and y to col and row\n     * \n     * @method CameraGrid#getCoors\n     * @returns {object} col and row\n     */\n    this.getCoors = function(x, y)\n    {\n        return {\n            col: max(min(round((x - this.halfCellWidth) / this.cellWidth), this.maxCol), this.minCol),\n            row: max(min(round((y - this.halfCellHeight) / this.cellHeight), this.maxRow), this.minRow)\n        };\n    };\n\n    this.addRef = function(object)\n    {   \n        var key = object._arrayName + object._id;\n        var toSet = {\n            arrayName: object._arrayName,\n            id: object._id\n        };\n\n        var box = object.body.boundingBox;\n\n        var minCol = max(min(round((box.minX - this.halfCellWidth) / this.cellWidth), this.maxCol), this.minCol),\n            minRow = max(min(round((box.minY - this.halfCellHeight) / this.cellHeight), this.maxRow), this.minRow),\n            maxCol = max(min(round((box.maxX - this.halfCellWidth) / this.cellWidth), this.maxCol), this.minCol),\n            maxRow = max(min(round((box.maxY - this.halfCellHeight) / this.cellHeight), this.maxRow), this.minRow);\n\n        var col, row;\n\n        for(col = minCol; col <= maxCol; col++)\n        {\n            for(row = minRow; row <= maxRow; row++)\n            {\n                this.grid[col][row][key] = toSet;\n            }\n        }\n\n        object._minCol = minCol;\n        object._minRow = minRow;\n        object._maxCol = maxCol;\n        object._maxRow = maxRow;\n    };\n\n    this.removeRef = function(object)\n    {\n        var key = object._arrayName + object._id;\n\n        var minCol = object._minCol,\n            minRow = object._minRow,\n            maxCol = object._maxCol,\n            maxRow = object._maxRow;\n\n        var col, row;\n\n        for(col = minCol; col <= maxCol; col++)\n        {\n            for(row = minRow; row <= maxRow; row++)\n            {\n                delete this.grid[col][row][key];\n            }\n        }\n    };\n\n    this.loopThroughVisibleCells = function(minCol, minRow, maxCol, maxRow, callback)\n    {\n        var col, row;\n\n        for(col = minCol; col <= maxCol; col++)\n        {\n            for(row = minRow; row <= maxRow; row++)\n            {\n                callback(this.grid[col][row], col, row);\n            }\n        }\n    };\n\n    this.loopThroughAllCells = function(callback)\n    {\n        var col, row;\n\n        for(col = this.minCol; col <= this.maxCol; col++)\n        {\n            for(row = this.minRow; row <= this.maxRow; row++)\n            {\n                callback(this.grid[col][row], col, row);\n            }\n        }\n    };\n\n    this.addToAllCells = function(name, property)\n    {\n        var col, row;\n\n        for(col = this.minCol; col <= this.maxCol; col++)\n        {\n            for(row = this.minRow; row <= this.maxRow; row++)\n            {\n                Object.defineProperty(this.grid[col][row], name, \n                {\n                    enumerable: false,\n                    writable: true,\n                    configurable: true,\n                    value: property\n                });\n            }\n        }\n    };\n\n    // Will be expensive since this applies to the entire grid\n    this.removeAll = function(arrayToRemove)\n    {\n        var col, row, cell, i;\n\n        for(col = this.minCol; col <= this.maxCol; col++)\n        {\n            for(row = this.minRow; row <= this.maxRow; row++)\n            {\n                cell = this.grid[col][row];\n\n                for(i in cell)\n                {\n                    if(cell[i].arrayName === arrayToRemove)\n                    {\n                        delete cell[i];\n                    }\n                }\n            }\n        }\n    };\n}\n\nmodule.exports = CameraGrid;","var CartesianSystem = {\n    World: require(\"./World.js\"),\n    Utils: {\n        CreateAA: require(\"./createAA.js\")\n    }\n};\n\n// Export it\nmodule.exports = CartesianSystem;\nglobal.CartesianSystem = CartesianSystem;\n","var createAA = require(\"./createAA.js\");\n\nfunction GameObjectHandler()\n{\n    var gameObjects = createAA([], undefined, \"gameObjects\");\n\n    // used for loop (mainly so we don't use an object again)\n    var usedFL = {};\n    // Will be used as a cache to contain all the stuff we need to process\n    var used = {};\n\n    this.addArray = function(name, gameObjectArray)\n    {\n        return gameObjects.addObject(name, gameObjectArray);\n    };\n    \n    this.getArray = function(name)\n    {\n        return gameObjects.getObject(name);\n    };\n\n    this.removeArray = function(name)\n    {\n        return gameObjects.removeObject(name);\n    };\n\n    // Gets all \n    this.window = function(cameraGrid, minCol, minRow, maxCol, maxRow) \n    {\n        usedFL = {};\n        used = {};\n\n        var grid = cameraGrid.grid;\n\n        var col, row, cell, i, object, id;\n\n        // Loop through grid\n        for(col = minCol; col <= maxCol; col++)\n        {\n            for(row = minRow; row <= maxRow; row++)\n            {\n                cell = grid[col][row];\n\n                // Loop through the cell\n                for(i in cell)\n                {\n                    // We already recorded key (`object._arrayName + object._id`), so don't do it again since some \n                    // objects can be in multiple cells at a time\n                    if(usedFL[i])\n                    {\n                        continue;\n                    }\n\n                    // Is the same as createAA#getObject(name)\n                    object = gameObjects[gameObjects.references[cell[i].arrayName]][cell[i].id];\n\n                    // Save info for rendering\n                    id = gameObjects.references[object._arrayName];\n                    used[id] = used[id] === undefined ? [] : used[id];\n                    used[id].push(object._id);\n\n                    // Show we've recorded the key (`object._arrayName + object._id`)\n                    usedFL[i] = true;\n                }\n            }\n        }\n    };\n\n    this.act = function(cameraGrid, key)\n    {\n        var i, j, object;\n\n        for(i in used)\n        {\n            for(j = 0; j < used[i].length; j++)\n            {\n                object = gameObjects[i][used[i][j]];\n\n                object[key]();\n\n                // Refreshes the object's cell place after it has been moved \n                if(object.body.moved)\n                {\n                    cameraGrid.removeRef(object);\n                    cameraGrid.addRef(object);\n                }\n            }\n        }\n    };\n\n    this.eachObjectsInCamera = function(callback)\n    {\n        var i, j;\n\n        for(i in used)\n        {\n            for(j = 0; j < used[i].length; j++)\n            {\n                callback(gameObjects[i][used[i][j]]);\n            }\n        }\n    };\n}\n\nmodule.exports = GameObjectHandler;","let Camera = require(\"./Camera.js\");\nlet CameraGrid = require(\"./CameraGrid.js\");\nlet GameObjectHandler = require(\"./GameObjectHandler\");\nlet createAA = require(\"./createAA.js\");\n\nfunction World(config)\n{\n    let camera = new Camera(\n        config.camera.window.x,\n        config.camera.window.y,\n        config.camera.window.width,\n        config.camera.window.height,\n    );\n    let cameraGrid = new CameraGrid(\n        config.grid.cols, \n        config.grid.rows, \n        config.grid.cell.width, \n        config.grid.cell.height\n    );\n    let gameObjectHandler = new GameObjectHandler();\n\n    if(typeof config.level === \"undefined\" || typeof config.level.bounds === \"undefined\")\n    {\n        camera.bounds.minX = camera.bounds.minY = 0;\n        camera.bounds.maxX = config.grid.cols * config.grid.cell.width;\n        camera.bounds.maxY = config.grid.rows * config.grid.cell.height;\n    }\n    else\n    {\n        camera.bounds.minX = config.level.bounds.minX;\n        camera.bounds.minY = config.level.bounds.minY;\n        camera.bounds.maxX = config.level.bounds.maxX;\n        camera.bounds.maxY = config.level.bounds.maxY;\n    }\n\n    var round = Math.round;\n    var min = Math.min;\n    var max = Math.max;\n\n    var cameraTracker = {};\n    cameraTracker.update = function()\n    {\n        // Note: Keep this out of the camera!\n        var camBox = camera.boundingBox;\n        var cg = cameraGrid;\n\n        // Todo: get rid of the bounds restrainment (min/max functions) and keep the camera in the world/grid \n        this.minCol = min(max(round((camBox.minX - cg.halfCellWidth) / cg.cellWidth), cg.minCol), cg.maxCol);\n        this.minRow = min(max(round((camBox.minY - cg.halfCellHeight) / cg.cellHeight), cg.minRow), cg.maxRow);\n        this.maxCol = min(max(round((camBox.maxX - cg.halfCellWidth) / cg.cellWidth), cg.minCol), cg.maxCol);\n        this.maxRow = min(max(round((camBox.maxY - cg.halfCellHeight) / cg.cellHeight), cg.minRow), cg.maxRow);\n    };\n\n    this.init = function()\n    {\n        cameraGrid.reset();\n        cameraTracker.update();\n\n        // You can't initalize more than once (kinda like a singleton)\n        delete this.init;\n\n        return this;\n    };\n\n    this.step = function()\n    {\n        gameObjectHandler.window(\n            cameraGrid,\n            cameraTracker.minCol, \n            cameraTracker.minRow, \n            cameraTracker.maxCol, \n            cameraTracker.maxRow\n        );\n\n        for(var i = 0; i < arguments.length; i++)\n        {\n            gameObjectHandler.act(cameraGrid, arguments[i]);\n        }\n\n        return this;\n    };\n    this.update = function()\n    {\n        this.cam.update();\n        this.step.apply(this, arguments);\n\n        return this;\n    };\n\n    this.add = {};\n    this.add.gameObjectArray = function(object, arrayName)\n    {\n        if(arrayName === undefined) { arrayName = object.name.charAt(0).toLowerCase() + object.name.slice(1); }\n\n        var array = gameObjectHandler.addArray(arrayName, createAA(object, undefined, arrayName));\n\n        var lastAdd = array.add;\n        Object.defineProperty(array, \"add\", \n        {\n            enumerable: false,\n            writable: true,\n            configurable: true,\n            value: function()\n            {\n                var gameObject = lastAdd.apply(this, arguments);\n\n                cameraGrid.addRef(gameObject);\n                return gameObject;\n            }\n        });\n        var lastAddObject = array.addObject;\n        Object.defineProperty(array, \"addObject\", \n        {\n            enumerable: false,\n            writable: true,\n            configurable: true,\n            value: function()\n            {\n                var gameObject = lastAddObject.apply(this, arguments);\n                if(!gameObject) { return; }\n\n                cameraGrid.addRef(gameObject);\n                return gameObject;\n            }\n        });\n\n        var lastRemove = array.remove;\n        Object.defineProperty(array, \"remove\",  \n        {\n            enumerable: false,\n            writable: true,\n            configurable: true,\n            value: function(id)\n            {\n                cameraGrid.removeRef(this[id]);\n                return lastRemove.apply(this, arguments);\n            }\n        });\n        var lastRemoveObject = array.removeObject;\n        Object.defineProperty(array, \"removeObject\",  \n        {\n            enumerable: false,\n            writable: true,\n            configurable: true,\n            value: function(name)\n            {\n                cameraGrid.removeRef(this[this.references[name]]);\n                return lastRemoveObject.apply(this, arguments);\n            }\n        });\n\n        return array;\n    };\n\n    this.get = {};\n    this.get.gameObjectArray = function(arrayName)\n    {\n        return gameObjectHandler.getArray(arrayName);\n    };\n\n    this.remove = {};\n    this.remove.gameObjectArray = function(arrayName)\n    {\n        cameraGrid.removeAll(arrayName);\n        gameObjectHandler.removeArray(arrayName);\n    };\n\n    this.grid = {};\n    this.grid.getCell = function(x, y)\n    {\n        var pos = cameraGrid.getCoors(x, y);\n        return cameraGrid.grid[pos.col][pos.row];\n    };\n    this.grid.loopThroughVisibleCells = function(callback)\n    {\n        cameraGrid.loopThroughVisibleCells(\n            cameraTracker.minCol,\n            cameraTracker.minRow,\n            cameraTracker.maxCol,\n            cameraTracker.maxRow,\n            callback\n        );\n\n        return this;\n    };\n    this.grid.loopThroughAllCells = function(callback)\n    {\n        cameraGrid.loopThroughAllCells(callback);\n        return this;\n    };\n    this.grid.addToAllCells = function(name, property)\n    {\n        cameraGrid.addToAllCells(name, property);\n\n        return this;\n    };\n    this.grid.refreshReferences = function(object)\n    {\n        cameraGrid.removeRef(object);\n        cameraGrid.addRef(object);\n\n        return this;\n    };\n\n    this.cam = {};\n    this.cam.update = function()\n    {\n        camera.update();\n        cameraTracker.update();\n    };\n    this.cam.setFocus = function(x, y, name)\n    {\n        camera.setFocus(x, y, name);\n        return this;\n    };\n    this.cam.updateFocus = function(x, y)\n    {\n        camera.updateFocus(x, y);\n        return this;\n    };\n    this.cam.getFocus = function()\n    {\n        return camera.getFocus();\n    };\n    this.cam.removeFocus = function()\n    {\n        camera.removeFocus();\n        return this;\n    };\n    this.cam.getScroll = function()\n    {\n        return camera.getScroll();\n    };\n    this.cam.getTranslateValues = function()\n    {\n        return camera.getTranslateValues();\n    };\n    this.cam.getBounds = function()\n    {\n        return camera.bounds;\n    };\n    this.cam.getWindow = function()\n    {\n        return {\n            x: camera.windowX,\n            y: camera.windowY,\n            width: camera.windowWidth,\n            height: camera.windowHeight\n        };\n    };\n    this.cam.resize = function(windowX, windowY, windowWidth, windowHeight)\n    {\n        camera.resize(windowX, windowY, windowWidth, windowHeight);\n    };\n    this.cam.getWindowX = function()\n    {\n        return camera.windowX;\n    };\n    this.cam.getWindowY = function()\n    {\n        return camera.windowY;\n    };\n    this.cam.getWindowWidth = function()\n    {\n        return camera.windowWidth;\n    };\n    this.cam.getWindowHeight = function()\n    {\n        return camera.windowHeight;\n    };\n    this.cam.setWindowX = function(x)\n    {\n        camera.windowX = x;\n        return this;\n    };\n    this.cam.setWindowY = function(y)\n    {\n        camera.windowY = y;\n        return this;\n    };\n    this.cam.setWindowWidth = function(width)\n    {\n        camera.windowWidth = width;\n        return this;\n    };\n    this.cam.setWindowHeight = function(height)\n    {\n        camera.windowHeight = height;\n        return this;\n    };\n\n    // DEV only!\n    this.exposeInternals = function()\n    {\n        return { \n            camera: camera,\n            cameraGrid: cameraGrid,\n            gameObjectHandler: gameObjectHandler,\n            cameraTracker: cameraTracker\n        };\n    };\n}\n\nmodule.exports = World;","/**\n * @function `createAA` Creates a key value pair system or associative array with methods\n * \n * @param {Object} object The constructor/object to pass in \n * @param {object} keypairs The keypairs/associative array to pass in (optional)\n * @param {string} arrayName What this array will be called (optional)\n * \n * @returns {object} The keypair/associative array\n */\nfunction createAA(object, keypairs, arrayName)\n{\n    if(typeof keypairs !== \"object\")\n    {\n        keypairs = Object.create(null);\n    }\n\n    arrayName = arrayName || object.name.charAt(0).toLowerCase() + object.name.slice(1);\n\n    /**\n     * All the methods and properties that are **NOT** part of the data that will be stored in `keypairs`\n     */\n    var system = {\n        cache: {\n            lowest: undefined, // Lowest empty index\n            highest: -1, // highest index\n        },\n        references: {},\n        length: 0,\n        _name: arrayName,\n        // Any thing added to this `add` method must also be added to the `add` method in the `if` statement\n        add: function()\n        {\n            var id = this.cache.highest + 1;\n\n            if(this.cache.lowest !== undefined && !this.unique)\n            {\n                id = this.cache.lowest;\n                this.cache.lowest = undefined;\n            }\n            if(id > this.cache.highest)\n            {\n                this.cache.highest = id;\n            }\n            this.cache.tempId = id;\n            this.length++;\n\n            var item = Object.create(object.prototype);\n            object.apply(item, arguments);\n            this[id] = item;\n            this[id]._name = this.cache.tempName || this.name;\n            this[id]._arrayName = this._name;\n            this[id]._id = id;\n            return item;\n        },\n        remove: function(id)\n        {\n            if(this[id] === undefined)\n            {\n                return false;\n            }\n\n            if(id === this.cache.highest)\n            {\n                this.cache.highest--;\n            }\n            if(this.cache.lowest === undefined || id < this.cache.lowest)\n            {\n                this.cache.lowest = id;\n            }\n\n            this.length--;\n            return delete this[id];\n        },\n        addObject: function(name)\n        {\n            if(this.references[name] !== undefined)\n            {\n                return;\n            }\n            \n            var args = Array.prototype.slice.call(arguments);\n            this.cache.tempName = args.shift();\n            var item = this.add.apply(this, args);\n            this.references[name] = this.cache.tempId;\n            delete this.cache.tempId;\n            return item;\n        },\n        getObject: function(name)\n        {\n            return this[this.references[name]] || delete this.references[name];\n        },\n        removeObject: function(name)\n        {   \n            var toRemove = this.references[name];\n            var success = delete this.references[name];\n\n            return this.remove(toRemove) && success;\n        },\n        forEach: function(callback)\n        {\n            for(var i in this)\n            {\n                callback(this[i], i, this);\n            }\n\n            return this;\n        },\n        define: function(key, prop)\n        {\n            Object.defineProperty(this, key,  \n            {\n                enumerable: false,\n                writable: true,\n                configurable: true,\n                value: prop\n            });\n        }\n    };\n\n    if(object.apply === undefined)\n    {\n        system.add = function()\n        {\n            var id = this.cache.highest + 1;\n            if(this.cache.lowest !== undefined && !this.unique)\n            {\n                id = this.cache.lowest;\n                this.cache.lowest = undefined;\n            }\n            if(id > this.cache.highest)\n            {\n                this.cache.highest = id;\n            }\n            this.cache.tempId = id;\n\n            this[id] = arguments[0];\n            this[id]._name = this.cache.tempName || this.name;\n            this[id]._arrayName = this._name;\n            this[id]._id = id;\n            return this[id];\n        };\n    }\n\n    // Add methods and properties from system to keypairs/associative array that will be returned\n    for(var i in system)\n    {\n        Object.defineProperty(keypairs, i,  \n        {\n            enumerable: false,\n            writable: true,\n            configurable: true,\n            value: system[i]\n        });\n    }\n\n    return keypairs;\n}\n\nmodule.exports = createAA;"],"sourceRoot":""}