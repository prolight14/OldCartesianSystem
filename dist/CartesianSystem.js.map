{"version":3,"sources":["webpack://CartesianSystem/webpack/universalModuleDefinition","webpack://CartesianSystem/webpack/bootstrap","webpack://CartesianSystem/../node_modules/webpack/buildin/global.js","webpack://CartesianSystem/./Camera.js","webpack://CartesianSystem/./CameraGrid.js","webpack://CartesianSystem/./CartesianSystem.js","webpack://CartesianSystem/./GameObjectHandler.js","webpack://CartesianSystem/./World.js","webpack://CartesianSystem/./createAA.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wB;;;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,UAAU;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,K;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B,sBAAsB;AACrD;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;;ACnIA;AACA,WAAW,mBAAO,CAAC,8BAAY;AAC/B;;AAEA;AACA;AACA;;;;;;;;;;;;;ACNA,eAAe,mBAAO,CAAC,oCAAe;;AAEtC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,cAAc;AACvC;AACA,6BAA6B,cAAc;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,mC;;;;;;;;;;;ACpCA,aAAa,mBAAO,CAAC,gCAAa;AAClC,iBAAiB,mBAAO,CAAC,wCAAiB;AAC1C,wBAAwB,mBAAO,CAAC,mDAAqB;AACrD,eAAe,mBAAO,CAAC,oCAAe;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,sBAAsB;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;;AAEA,uB;;;;;;;;;;;ACpJA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,S;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA,0B","file":"CartesianSystem.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CartesianSystem\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CartesianSystem\"] = factory();\n\telse\n\t\troot[\"CartesianSystem\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./CartesianSystem.js\");\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","function Camera(windowX, windowY, windowWidth, windowHeight)\r\n{\r\n    // Window stuff\r\n    this.windowX = windowX;\r\n    this.windowY = windowY;\r\n    this.windowWidth = windowWidth;\r\n    this.windowHeight = windowHeight;\r\n    this.halfWindowWidth = this.windowWidth / 2;\r\n    this.halfWindowHeight = this.windowHeight / 2;\r\n\r\n    // Needed for moving the camera\r\n    this.scrollX = this.halfWindowWidth;\r\n    this.scrollY = this.halfWindowHeight;\r\n    this.scrollSpeed = 0.5;\r\n\r\n    // The bounds the camera will stay with in\r\n    // These will need to be set externally\r\n    this.bounds = {\r\n        minX: -Infinity,\r\n        minY: -Infinity,\r\n        maxX: Infinity,\r\n        maxY: Infinity\r\n    };\r\n\r\n    this.boundingBox = {\r\n        minX: this.scrollX - this.halfWindowWidth,\r\n        minY: this.scrollY - this.halfWindowHeight,\r\n        maxX: this.scrollX + this.halfWindowWidth,\r\n        maxY: this.scrollY + this.halfWindowHeight\r\n    };\r\n\r\n    var focusObject;\r\n\r\n    this.update = function()\r\n    {\r\n        if(focusObject)\r\n        {\r\n            this.scroll(focusObject.x, focusObject.y);\r\n        }\r\n    };\r\n\r\n    this.setFocus = function(x, y, name)\r\n    {\r\n        focusObject = {\r\n            x: x,\r\n            y: y,\r\n            name: name\r\n        };\r\n    };\r\n    this.updateFocus = function(x, y)\r\n    {\r\n        if(focusObject)\r\n        {\r\n            focusObject.x = x;\r\n            focusObject.y = y;\r\n        }\r\n    };\r\n    this.getFocus = function()\r\n    {\r\n        return focusObject;\r\n    };\r\n    this.removeFocus = function()\r\n    {\r\n        focusObject = undefined;\r\n    };\r\n\r\n    this.getTranslateValues = function()\r\n    {\r\n        return {\r\n            x: this.windowX + this.halfWindowWidth - this.scrollX,\r\n            y: this.windowY + this.halfWindowHeight - this.scrollY, \r\n        };\r\n    };\r\n}\r\nCamera.prototype.scroll = function(x, y)\r\n{\r\n    // Move direction and move magnitude\r\n    // These will be used to move the scroll of the camera \r\n    var moveDir = Math.atan2(y - this.scrollY, x - this.scrollX);\r\n    var moveMag = Math.sqrt(Math.pow(x - this.scrollX, 2) + Math.pow(y - this.scrollY, 2)) * this.scrollSpeed;\r\n\r\n    // Move camera in both x and y components\r\n    this.scrollX += moveMag * Math.cos(moveDir);\r\n    this.scrollY += moveMag * Math.sin(moveDir);\r\n\r\n    // Keep it within bounds\r\n    this.scrollX = Math.min(Math.max(this.scrollX, this.bounds.minX + this.halfWindowWidth), this.bounds.maxX - this.halfWindowWidth);\r\n    this.scrollY = Math.min(Math.max(this.scrollY, this.bounds.minY + this.halfWindowHeight), this.bounds.maxY - this.halfWindowHeight);\r\n\r\n    // Update the bounding box\r\n    this.boundingBox.minX = this.scrollX - this.halfWindowWidth;\r\n    this.boundingBox.minY = this.scrollY - this.halfWindowHeight;\r\n    this.boundingBox.maxX = this.scrollX + this.halfWindowWidth;\r\n    this.boundingBox.maxY = this.scrollY + this.halfWindowHeight;\r\n};\r\n\r\nmodule.exports = Camera;","function CameraGrid(cols, rows, cellWidth, cellHeight)\r\n{\r\n    this.cols = cols;\r\n    this.rows = rows;\r\n    this.cellWidth = cellWidth;\r\n    this.cellHeight = cellHeight;\r\n    this.halfCellWidth = cellWidth / 2;\r\n    this.halfCellHeight = cellHeight / 2;\r\n\r\n    this.grid = [];\r\n\r\n    var round = Math.round;\r\n    var min = Math.min;\r\n    var max = Math.max;\r\n\r\n    this.reset = function()\r\n    {\r\n        this.grid.length = 0;\r\n\r\n        var cols = this.cols;\r\n        var rows = this.rows;\r\n        var i, cell;\r\n\r\n        for(i = 0; i < cols; i++)\r\n        {\r\n            // Create a cell with no __proto__ object\r\n            cell = Object.create(null);\r\n            cell.refs = Object.create(null);\r\n            this.grid.push(Array(rows).fill(cell));\r\n        }\r\n        \r\n        this.minCol = 0;\r\n        this.minRow = 0;\r\n        this.maxCol = this.grid.length - 1;\r\n        this.maxRow = this.grid[0].length - 1;\r\n    };\r\n\r\n    /**\r\n     * Only use if you understand the implications, in other \r\n     * words only use if you don't need a bounds check first\r\n     * \r\n     * @method CameraGrid#getCoorssFast\r\n     * @returns {object} col and row\r\n     */\r\n    this.getCoorsFast = function()\r\n    {\r\n        return {\r\n            col: round((x - this.halfCellWidth) / this.cellWidth),\r\n            row: round((y - this.halfCellHeight) / this.cellHeight)\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Converts x and y to col and row\r\n     * \r\n     * @method CameraGrid#getCoors\r\n     * @returns {object} col and row\r\n     */\r\n    this.getCoors = function()\r\n    {\r\n        return {\r\n            col: max(min(round((x - this.halfCellWidth) / this.cellWidth), this.maxCol), this.minCol),\r\n            row: max(min(round((y - this.halfCellHeight) / this.cellHeight), this.maxRow), this.minRow)\r\n        };\r\n    };\r\n\r\n    this.addRef = function(object)\r\n    {   \r\n        var key = object._arrayName + object._id;\r\n        var toSet = {\r\n            arrayName: object._arrayName,\r\n            id: object._id\r\n        };\r\n\r\n        var box = object.body.boundingBox;\r\n\r\n        var minCol = min(max(round((box.minX - this.halfCellWidth) / this.cellWidth), this.minCol), this.maxCol),\r\n            minRow = min(max(round((box.minY - this.halfCellHeight) / this.cellHeight), this.minRow), this.maxRow),\r\n            maxCol = min(max(round((box.maxX - this.halfCellWidth) / this.cellWidth), this.minCol), this.maxCol),\r\n            maxRow = min(max(round((box.maxY - this.halfCellHeight) / this.cellHeight), this.minRow), this.maxRow);\r\n\r\n        var col, row;\r\n\r\n        for(col = minCol; col <= maxCol; col++)\r\n        {\r\n            for(row = minRow; row <= maxRow; row++)\r\n            {\r\n                this.grid[col][row].refs[key] = toSet;\r\n            }\r\n        }\r\n\r\n        object._minCol = minCol;\r\n        object._minRow = minRow;\r\n        object._maxCol = maxCol;\r\n        object._maxRow = maxRow;\r\n    };\r\n\r\n    this.removeRef = function()\r\n    {\r\n        var key = object._arrayName + object._id;\r\n\r\n        var minCol = object._minCol,\r\n            minRow = object._minRow,\r\n            maxCol = object._maxCol,\r\n            maxRow = object._maxRow;\r\n\r\n        var col, row;\r\n\r\n        for(col = minCol; col <= maxCol; col++)\r\n        {\r\n            for(row = minRow; row <= maxRow; row++)\r\n            {\r\n                delete this.grid[col][row].refs[key];\r\n            }\r\n        }\r\n    };\r\n\r\n    this.loopWithin = function(upperLeftCol, upperLeftRow, lowerRightCol, lowerRightRow, callback)\r\n    {\r\n        var col, row;\r\n\r\n        for(col = upperLeftCol; col <= lowerRightCol; col++)\r\n        {\r\n            for(row = upperLeftRow; row <= lowerRightRow; row++)\r\n            {\r\n                callback(this.grid[col][row], col, row);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nmodule.exports = CameraGrid;","var CartesianSystem = {\r\n    World: require(\"./World.js\")\r\n};\r\n\r\n// Export it\r\nmodule.exports = CartesianSystem;\r\nglobal.CartesianSystem = CartesianSystem;\r\n","var createAA = require(\"./createAA.js\");\r\n\r\nfunction GameObjectHandler()\r\n{\r\n    var gameObjects = createAA([], undefined, \"gameObjects\");\r\n    var used = Object.create(null);\r\n\r\n    this.window = function(grid, minCol, minRow, maxCol, maxRow) \r\n    {\r\n        var col, row, cell, i;\r\n\r\n        for(col = minCol; col < maxCol; col++)\r\n        {\r\n            for(row = minRow; row < maxRow; row++)\r\n            {\r\n                cell = grid[col][row];\r\n\r\n                for(i in cell.refs)\r\n                {\r\n\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    this.act = function(key)\r\n    {\r\n\r\n    };\r\n\r\n    this.eachObjectsInCamera = function(callback)\r\n    {\r\n\r\n    };\r\n}\r\n\r\nmodule.exports = GameObjectHandler;","let Camera = require(\"./Camera.js\");\r\nlet CameraGrid = require(\"./CameraGrid.js\");\r\nlet GameObjectHandler = require(\"./GameObjectHandler\");\r\nlet createAA = require(\"./createAA.js\");\r\n\r\nfunction World(config)\r\n{\r\n    let camera = new Camera(\r\n        config.camera.window.x,\r\n        config.camera.window.y,\r\n        config.camera.window.width,\r\n        config.camera.window.height,\r\n    );\r\n    let cameraGrid = new CameraGrid(\r\n        config.grid.cols, \r\n        config.grid.rows, \r\n        config.grid.cell.width, \r\n        config.grid.cell.height\r\n    );\r\n    let gameObjectHandler = new GameObjectHandler();\r\n\r\n    if(typeof config.level === \"undefined\" || typeof config.level.bounds === \"undefined\")\r\n    {\r\n        camera.bounds.minX = camera.bounds.minY = 0;\r\n        camera.bounds.maxX = config.grid.cols * config.grid.cell.width;\r\n        camera.bounds.maxY = config.grid.rows * config.grid.cell.height;\r\n    }\r\n    else\r\n    {\r\n        camera.bounds.minX = config.level.bounds.minX;\r\n        camera.bounds.minY = config.level.bounds.minY;\r\n        camera.bounds.maxX = config.level.bounds.maxX;\r\n        camera.bounds.maxY = config.level.bounds.maxY;\r\n    }\r\n\r\n    var round = Math.round;\r\n    var min = Math.min;\r\n    var max = Math.max;\r\n\r\n    var cameraTracker = {};\r\n    cameraTracker.update = function()\r\n    {\r\n        // Note: Keep this out of the camera!\r\n        var camBox = camera.boundingBox;\r\n        var cg = cameraGrid;\r\n\r\n        // Todo: get rid of the bounds restrainment (min/max functions) and keep the camera in the world/grid \r\n        this.upperLeftCol = min(max(round((camBox.minX - cg.halfCellWidth) / cg.cellWidth), cg.minCol), cg.maxCol);\r\n        this.upperLeftRow = min(max(round((camBox.minY - cg.halfCellHeight) / cg.cellHeight), cg.minRow), cg.maxRow);\r\n        this.lowerRightCol = min(max(round((camBox.maxX - cg.halfCellWidth) / cg.cellWidth), cg.minCol), cg.maxCol);\r\n        this.lowerRightRow = min(max(round((camBox.maxY - cg.halfCellHeight) / cg.cellHeight), cg.minRow), cg.maxRow);\r\n    };\r\n\r\n    this.init = function()\r\n    {\r\n        cameraGrid.reset();\r\n        cameraTracker.update();\r\n\r\n        // You can't initalize more than once (kinda like a singleton)\r\n        delete this.init;\r\n    };\r\n\r\n    this.step = function()\r\n    {\r\n        camera.update();\r\n        cameraTracker.update();\r\n\r\n        gameObjectHandler.window(\r\n            cameraGrid.grid,\r\n            cameraTracker.upperLeftCol, \r\n            cameraTracker.upperLeftRow, \r\n            cameraTracker.lowerRightCol, \r\n            cameraTracker.lowerRightRow\r\n        );\r\n\r\n        for(var i = 0; i < arguments.length; i++)\r\n        {\r\n\r\n        }\r\n    };\r\n\r\n    // DEV only!\r\n    this.exposeInternals = function()\r\n    {\r\n        return { \r\n            camera: camera,\r\n            cameraGrid: cameraGrid,\r\n            gameObjectHandler: gameObjectHandler,\r\n            cameraTracker: cameraTracker\r\n        };\r\n    };\r\n\r\n    this.utils = {};\r\n    this.utils.createAA = createAA;\r\n\r\n    this.cam = {};\r\n    this.cam.setFocus = function(x, y, name)\r\n    {\r\n        camera.setFocus(x, y, name);\r\n        return this;\r\n    };\r\n    this.cam.updateFocus = function(x, y)\r\n    {\r\n        camera.updateFocus(x, y);\r\n        return this;\r\n    };\r\n    this.cam.getFocus = function()\r\n    {\r\n        return camera.getFocus();\r\n    };\r\n    this.cam.removeFocus = function()\r\n    {\r\n        camera.removeFocus();\r\n        return this;\r\n    };\r\n    this.cam.getScroll = function()\r\n    {\r\n        return { \r\n            x: camera.scrollX, \r\n            y: camera.scrollY\r\n        };\r\n    };\r\n    this.cam.getTranslateValues = function()\r\n    {\r\n        return camera.getTranslateValues();\r\n    };\r\n    this.cam.getBounds = function()\r\n    {\r\n        return camera.bounds;\r\n    };\r\n\r\n    this.grid = {};\r\n    this.grid.loopThroughVisibleCells = function(callback)\r\n    {\r\n        cameraGrid.loopWithin(\r\n            cameraTracker.upperLeftCol,\r\n            cameraTracker.upperLeftRow,\r\n            cameraTracker.lowerRightCol,\r\n            cameraTracker.lowerRightRow,\r\n            callback\r\n        );\r\n    };\r\n    this.grid.addReference = function(object)\r\n    { \r\n        cameraGrid.addRef(object);\r\n    };\r\n}\r\n\r\nmodule.exports = World;","/**\r\n * @function `createAA` Creates a key value pair system or associative array with methods\r\n * \r\n * @param {Object} object The constructor/object to pass in \r\n * @param {object} keypairs The keypairs/associative array to pass in (optional)\r\n * @param {string} arrayName What this array will be called (optional)\r\n * \r\n * @returns {object} The keypair/associative array\r\n */\r\nfunction createAA(object, keypairs, arrayName)\r\n{\r\n    if(typeof keypairs !== \"object\")\r\n    {\r\n        keypairs = Object.create(null);\r\n    }\r\n\r\n    arrayName = arrayName || object.name.charAt(0).toLowerCase() + object.name.slice(1);\r\n\r\n    /**\r\n     * All the methods and properties that are **NOT** part of the data that will be stored in `keypairs`\r\n     */\r\n    var system = {\r\n        cache: {\r\n            lowest: undefined, // Lowest empty index\r\n            highest: -1, // highest index\r\n        },\r\n        references: {},\r\n        _name: arrayName,\r\n        // Any thing added to this `add` method must also be added to the `add` method in the `if` statement\r\n        add: function()\r\n        {\r\n            var id = this.cache.highest + 1;\r\n\r\n            if(this.cache.lowest !== undefined && !this.unique)\r\n            {\r\n                id = this.cache.lowest;\r\n                this.cache.lowest = undefined;\r\n            }\r\n            if(id > this.cache.highest)\r\n            {\r\n                this.cache.highest = id;\r\n            }\r\n            this.cache.tempId = id;\r\n\r\n            var item = Object.create(object.prototype);\r\n            object.apply(item, arguments);\r\n            this[id] = item;\r\n            this[id]._name = this.cache.tempName || this.name;\r\n            this[id]._arrayName = this._name;\r\n            this[id]._id = id;\r\n            return item;\r\n        },\r\n        remove: function(id)\r\n        {\r\n            if(id === this.cache.highest)\r\n            {\r\n                this.cache.highest--;\r\n            }\r\n            if(this.cache.lowest === undefined || id < this.cache.lowest)\r\n            {\r\n                this.cache.lowest = id;\r\n            }\r\n\r\n            return delete this[id];\r\n        },\r\n        addObject: function(name)\r\n        {\r\n            if(this.references[name] !== undefined)\r\n            {\r\n                return;\r\n            }\r\n            \r\n            var args = Array.prototype.slice.call(arguments);\r\n            this.cache.tempName = args.shift();\r\n            var item = this.add.apply(this, args);\r\n            this.references[name] = this.cache.tempId;\r\n            delete this.cache.tempId;\r\n            return item;\r\n        },\r\n        getObject: function(name)\r\n        {\r\n            return this[this.references[name]] || delete this.references[name];\r\n        },\r\n        removeObject: function(name)\r\n        {   \r\n            var toRemove = this.references[name];\r\n            var success = delete this.references[name];\r\n\r\n            return this.remove(toRemove) && success;\r\n        },\r\n        forEach: function(callback)\r\n        {\r\n            for(var i in this)\r\n            {\r\n                callback(this[i], i, this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        define: function(key, prop)\r\n        {\r\n            Object.defineProperty(this, key,  \r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: prop\r\n            });\r\n        }\r\n    };\r\n\r\n    if(object.apply === undefined)\r\n    {\r\n        system.add = function()\r\n        {\r\n            var id = this.cache.highest + 1;\r\n            if(this.cache.lowest !== undefined && !this.unique)\r\n            {\r\n                id = this.cache.lowest;\r\n                this.cache.lowest = undefined;\r\n            }\r\n            if(id > this.cache.highest)\r\n            {\r\n                this.cache.highest = id;\r\n            }\r\n            this.cache.tempId = id;\r\n\r\n            this[id] = arguments[0];\r\n            this[id]._name = this.cache.tempName || this.name;\r\n            this[id]._arrayName = this._name;\r\n            this[id]._id = id;\r\n            return this[id];\r\n        };\r\n    }\r\n\r\n    // Add methods and properties from system to keypairs/associative array that will be returned\r\n    for(var i in system)\r\n    {\r\n        Object.defineProperty(keypairs, i,  \r\n        {\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true,\r\n            value: system[i]\r\n        });\r\n    }\r\n\r\n    return keypairs;\r\n}\r\n\r\nmodule.exports = createAA;"],"sourceRoot":""}